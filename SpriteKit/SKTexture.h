/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "NSCoding-Protocol.h"
#import "NSCopying-Protocol.h"

@class CIFilter, NSArray, NSString, SKTextureCache;

@interface SKTexture : NSObject <NSCopying, NSCoding>
{
    BOOL _shouldGenerateMipmaps;
    BOOL _didGenerateMipmaps;
    BOOL _isPath;
    BOOL _isData;
    NSString *_imgName;
    NSArray *_searchPaths;
    struct CGRect _textRect;
    struct CGRect _textCoords;
    BOOL _disableAlpha;
    BOOL _isRotated;
    struct CGPoint _cropScale;
    struct CGPoint _cropOffset;
    int _alignment;
    int _rowLength;
    BOOL _isCompressed;
    int _compressedSize;
    unsigned int _compressedFormat;
    CIFilter *_filter;
    SKTexture *_originalTexture;
    long long _filteringMode;
    int _wrapMode;
    unsigned int _textureTarget;
    NSString *_originalAtlasName;
    NSString *_subTextureName;
    SKTextureCache *_textureCache;
    unsigned int *_alphaMap;
    struct CGSize _alphaMapSize;
}

+ (id)_textureWithImageNamed:(id)arg1;
+ (void)updateTextures;
+ (void)preloadTextures;
+ (void)deleteUnusedTextures;
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2;
+ (id)textureWithImage:(id)arg1;
+ (id)textureWithCGImage:(struct CGImage *)arg1;
+ (id)textureWithRect:(struct CGRect)arg1 inTexture:(id)arg2;
+ (id)textureWithImageNamed:(id)arg1 rect:(struct CGRect)arg2;
+ (id)textureWithImageNamed:(id)arg1;
+ (void)preloadTextures:(id)arg1 withCompletionHandler:(id)arg2;
+ (void)addTextureToPreloadlist:(id)arg1;
+ (id)lookupTextureCacheForName:(id)arg1;
+ (void)registerTextureCache:(id)arg1 forName:(id)arg2;
+ (id)_textureWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2;
+ (id)textureWithImagePath:(id)arg1;
@property(readonly) struct CGSize alphaMapSize; // @synthesize alphaMapSize=_alphaMapSize;
@property(readonly) unsigned int *alphaMap; // @synthesize alphaMap=_alphaMap;
@property(copy) NSString *subTextureName; // @synthesize subTextureName=_subTextureName;
@property(copy) NSString *originalAtlasName; // @synthesize originalAtlasName=_originalAtlasName;
@property unsigned int textureTarget; // @synthesize textureTarget=_textureTarget;
@property struct CGPoint cropOffset; // @synthesize cropOffset=_cropOffset;
@property BOOL isRotated; // @synthesize isRotated=_isRotated;
@property struct CGPoint cropScale; // @synthesize cropScale=_cropScale;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (int)glTextureId;
- (void)preload;
- (void)unload;
@property long long filteringMode;
@property int wrapMode;
@property(readonly) BOOL isRepeatable;
- (void)load;
- (void)_loadOnTextureQueue;
- (void)_ensureImageData;
@property BOOL usesMipmaps;
- (id)description;
- (id)textureByApplyingCIFilter:(id)arg1;
- (struct CGSize)size;
@property(readonly) struct CGSize pixelSize;
- (BOOL)isInMemory;
- (struct CGRect)textureRect;
@property BOOL disableAlpha;
@property(readonly) BOOL useAlpha;
@property(readonly) BOOL hasAlpha;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithImagePath:(id)arg1;
- (id)init;
- (id)initWithImageNamed:(id)arg1;
- (void)loadImageData;
- (void)initTextureCacheWithImageData;
- (void)preloadWithCompletionHandler:(id)arg1;
- (void)loadImageDataFromCGImage:(struct CGImage *)arg1 pointsSize:(struct CGSize)arg2;
- (BOOL)loadImageDataFromPVRData:(id)arg1;
- (BOOL)loadImageDataFromPVRGZData:(id)arg1;
- (void)setTextureDimension:(const struct CGSize *)arg1 withPixelSize:(const struct CGSize *)arg2;
- (void)commonInit;
- (struct CGImage *)alphaMask;
- (BOOL)alphaTestX:(double)arg1 y:(double)arg2;
- (void)generateAlphaMapOfSize:(struct CGSize)arg1 fromImage:(struct CGImage *)arg2;
- (id)imgName;
- (void)_savePngFromGLCache:(id)arg1;
- (struct CGImage *)_newTextureFromGLCache;
@property(readonly) NSString *imageNameOrPath;

@end

